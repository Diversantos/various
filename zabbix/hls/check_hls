#!/usr/bin/python
import os
import sys
import time
import json
import m3u8
import requests

#base_url = 'https://testdomain/playlist.m3u8'
#base_url = 'https://testdomain.local/chunklist_b4628000_slru.m3u8'
temp_dir = '/tmp'
ffprobe = '/usr/bin/ffprobe1'

# Discovery function
def discovery():
    data = []
    playlists = obj_base_m3u8.playlists
    # If playlists present prepare discovery for all of them ro prepase single playlist
    if playlists:
        for pl in playlists:
            pl_fullpath = pl.uri  #+ pl.uri
            data.append({'{#PROFILE}': pl.base_uri + pl.uri})
        return json.dumps({"data": data})
    else:
        return json.dumps({"data": {'#PROFILE': base_url}})

# Function for get average sum
def calAverage(nums):
    sum_num = 0
    for num in nums:
        sum_num = sum_num + num
    return int(sum_num / len(nums))

# Get file by uri and probe download time, size and speed
def downloadFile(url, directory):
    summ = []
    return_list = []
    localFilename = url.split('/')[-1]
    with open(directory + '/' + localFilename, 'wb') as f:
        start = time.clock()
        r = requests.get(url, stream=True)
        total_length = int(r.headers.get('content-length'))
        return_list.append({'#TOTAL-LENGTH': total_length})
        dl = 0
        if total_length is None: # no content length header
            f.write(r.content)
        else:
            for chunk in r.iter_content(1024):
                dl += len(chunk)
                f.write(chunk)
                #done = (50 * int(dl) / int(total_length))
                #sys.stdout.write("\r[%s%s] %s bps" % ('=' * done, ' ' * (50-done), dl//(time.clock() - start)))
                summ.append(dl // (time.clock() - start))
    return_list.append({'#AVERAGE-SPEED': calAverage(summ)})
#    os.remove(directory + "/" + localFilename)
    return_list.append({'#SPENDED-TIME': (time.clock() - start)})
    return return_list

# Get ffprobe information
def getFfprobe(file):
    if os.path.isfile(ffprobe):
        return os.popen(ffprobe + " -v quiet -show_format -show_streams -print_format json " + file).read()
    else:
        return json.dumps({"WARNING": "Executable file ffprobe not exist"})

def main():
    data = []
#    for segment in obj_base_m3u8.segments:
    segment = obj_base_m3u8.segments[0]
    uri = obj_base_m3u8.base_uri + segment.uri
    data.append({'#TSURI': (lambda a : 1 if (a) else 0)(uri) })
    data.append({'#TARGETDURATION': obj_base_m3u8.target_duration})
    data.append({'#DURATION': segment.duration})
    data.append({'#DOWNLOAD-OPTS': downloadFile(uri, temp_dir)})
    data.append({'#FFPROBE-OPTS': json.loads(getFfprobe(temp_dir + "/" + segment.uri))})
    os.remove(temp_dir + "/" + segment.uri)
    return json.dumps({base_url: data})

#######
### Start point

if len(sys.argv) > 1:
    action = sys.argv[1]
    base_url = sys.argv[2]
else:
    print "usage: %s <action[-d|-g]> <url>" % sys.argv[0]
    print "-d for discovery playlists in m3u8"
    print "-g for get data from playlist"
    print "For example: %s -g 'https://somesite.com/playlist.m3u8'" % sys.argv[0]
    sys.exit(1)

# Check url availability
try:
    request = requests.get(base_url)
except Exception:
    print "Something wrong with Internet"
    sys.exit(5)

# Get m3u8 list and check playlists or segments present
obj_base_m3u8 = m3u8.load(base_url)
if not obj_base_m3u8.playlists and not obj_base_m3u8.segments:
    print "Zero data from url"

# Make discovery function
if action == "-d":
    print discovery()
# Get data
elif action == "-g":
    print main()
